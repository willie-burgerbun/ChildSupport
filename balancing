import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
public class Main extends JFrame {
    private JTextField dateField, childSupportField, clerkFeesField, postageField;
    private JTextField delinquencyField, miscIVDField, nonMiscIVDField, driverLicenseField;
    private JTextField a08FeesField, preCheckBalanceField, finalCheckBalanceField;
    private JTextField holdsField, releasesField;
    private JButton calculateButton, newWorksheetButton, retrieveButton, exitButton;
    
    public Main() {
        setTitle("Accounting Balance Worksheet");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(0, 2, 10, 5));
        
        // Initialize components
        initComponents();
        
        // Add components to frame
        addComponentsToFrame();
        
        // Add action listeners
        addActionListeners();
        
        pack();
        setLocationRelativeTo(null);
    }
    
    private void initComponents() {
        dateField = new JTextField(15);
        childSupportField = new JTextField(15);
        clerkFeesField = new JTextField(15);
        postageField = new JTextField(15);
        delinquencyField = new JTextField(15);
        miscIVDField = new JTextField(15);
        nonMiscIVDField = new JTextField(15);
        driverLicenseField = new JTextField(15);
        a08FeesField = new JTextField(15);
        preCheckBalanceField = new JTextField(15);
        finalCheckBalanceField = new JTextField(15);
        holdsField = new JTextField(15);
        releasesField = new JTextField(15);
        
        calculateButton = new JButton("Check Balance");
        newWorksheetButton = new JButton("New Worksheet");
        retrieveButton = new JButton("Retrieve Data");
        exitButton = new JButton("Exit");
    }
    
    private void addComponentsToFrame() {
        add(new JLabel("Accounting Date (MM/dd/yyyy):"));
        add(dateField);
        add(new JLabel("Child Support Total:"));
        add(childSupportField);
        add(new JLabel("Clerk Fees:"));
        add(clerkFeesField);
        add(new JLabel("Postage:"));
        add(postageField);
        add(new JLabel("Delinquency Fee:"));
        add(delinquencyField);
        add(new JLabel("Misc IV-D:"));
        add(miscIVDField);
        add(new JLabel("Non-Misc IV-D:"));
        add(nonMiscIVDField);
        add(new JLabel("Driver's License Fee:"));
        add(driverLicenseField);
        add(new JLabel("A-08 Fees:"));
        add(a08FeesField);
        add(new JLabel("Pre-Check Balance:"));
        add(preCheckBalanceField);
        add(new JLabel("Final Check Balance:"));
        add(finalCheckBalanceField);
        add(new JLabel("Holds:"));
        add(holdsField);
        add(new JLabel("Releases:"));
        add(releasesField);
        
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(calculateButton);
        buttonPanel.add(newWorksheetButton);
        buttonPanel.add(retrieveButton);
        buttonPanel.add(exitButton);
        
        add(buttonPanel);
    }
    
    private void addActionListeners() {
        calculateButton.addActionListener(e -> checkBalance());
        newWorksheetButton.addActionListener(e -> clearFields());
        retrieveButton.addActionListener(e -> retrieveData());
        exitButton.addActionListener(e -> System.exit(0));
    }
    
    private void checkBalance() {
        try {
            double preCheckBalance = Double.parseDouble(preCheckBalanceField.getText());
            double finalCheckBalance = Double.parseDouble(finalCheckBalanceField.getText());
            
            double difference = preCheckBalance - finalCheckBalance;
            
            if (Math.abs(difference) < 0.01) {  // Using small epsilon for floating-point comparison
                JOptionPane.showMessageDialog(this, "Balanced!", "Success", 
                    JOptionPane.INFORMATION_MESSAGE);
                saveData();
            } else {
                JOptionPane.showMessageDialog(this, 
                    String.format("Out of Balance by $%.2f", Math.abs(difference)),
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter valid numbers", "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void saveData() {
        try {
            String date = dateField.getText();
            if (!isValidDate(date)) {
                JOptionPane.showMessageDialog(this, "Please enter a valid date (MM/dd/yyyy)", 
                    "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            Properties props = new Properties();
            props.setProperty("childSupport", childSupportField.getText());
            props.setProperty("clerkFees", clerkFeesField.getText());
            props.setProperty("postage", postageField.getText());
            props.setProperty("delinquency", delinquencyField.getText());
            props.setProperty("miscIVD", miscIVDField.getText());
            props.setProperty("nonMiscIVD", nonMiscIVDField.getText());
            props.setProperty("driverLicense", driverLicenseField.getText());
            props.setProperty("a08Fees", a08FeesField.getText());
            props.setProperty("preCheckBalance", preCheckBalanceField.getText());
            props.setProperty("finalCheckBalance", finalCheckBalanceField.getText());
            props.setProperty("holds", holdsField.getText());
            props.setProperty("releases", releasesField.getText());
            
            File file = new File(date.replace("/", "_") + ".properties");
            props.store(new FileOutputStream(file), "Accounting data for " + date);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error saving data: " + ex.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void retrieveData() {
        String date = JOptionPane.showInputDialog(this, 
            "Enter date to retrieve (MM/dd/yyyy):");
        if (date == null || !isValidDate(date)) {
            JOptionPane.showMessageDialog(this, "Please enter a valid date (MM/dd/yyyy)", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            File file = new File(date.replace("/", "_") + ".properties");
            if (!file.exists()) {
                JOptionPane.showMessageDialog(this, "No data found for this date", 
                    "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            Properties props = new Properties();
            props.load(new FileInputStream(file));
            
            dateField.setText(date);
            childSupportField.setText(props.getProperty("childSupport"));
            clerkFeesField.setText(props.getProperty("clerkFees"));
            postageField.setText(props.getProperty("postage"));
            delinquencyField.setText(props.getProperty("delinquency"));
            miscIVDField.setText(props.getProperty("miscIVD"));
            nonMiscIVDField.setText(props.getProperty("nonMiscIVD"));
            driverLicenseField.setText(props.getProperty("driverLicense"));
            a08FeesField.setText(props.getProperty("a08Fees"));
            preCheckBalanceField.setText(props.getProperty("preCheckBalance"));
            finalCheckBalanceField.setText(props.getProperty("finalCheckBalance"));
            holdsField.setText(props.getProperty("holds"));
            releasesField.setText(props.getProperty("releases"));
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + ex.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void clearFields() {
        Component[] components = getContentPane().getComponents();
        for (Component component : components) {
            if (component instanceof JTextField) {
                ((JTextField) component).setText("");
            }
        }
    }
    
    private boolean isValidDate(String date) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        dateFormat.setLenient(false);
        try {
            dateFormat.parse(date);
            return true;
        } catch (ParseException e) {
            return false;
        }
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }
}
